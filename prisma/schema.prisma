generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Candidate {
    id          String          @id @default(cuid())
    name        String
    jobTitle    String?         @map("job_title")
    jobLocation String?         @map("job_location")
    payRate     Int             @map("pay_rate")
    payType     PayType         @map("pay_type")
    notes       String?
    status      CandidateStatus
    rating      Int
    createdAt   DateTime        @default(now()) @map("created_at")
    updatedAt   DateTime        @updatedAt @map("updated_at")
    resumes     Resume[]
}

model Resume {
    id          String    @id @default(cuid())
    candidateId String    @map("candidate_id")
    fileName    String    @map("file_name")
    filePath    String    @map("file_path")
    bucketName  String    @map("bucket_name")
    fileSize    Int       @map("file_size")
    mimeType    String    @map("mime_type")
    url         String    @map("url")
    createdAt   DateTime  @default(now()) @map("created_at")
    updatedAt   DateTime  @updatedAt @map("updated_at")
    candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

/// *
/// * ENUMS
enum CandidateStatus {
    ACTIVE
    INTERVIEWING
    NOT_INTERESTED
    SUBMITTED
    FOLLOW_UP
    INTERESTED
    LVM
    PLACED
    OFFER
    SCREENING
}

enum PayType {
    HOURLY
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}
